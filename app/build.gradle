import java.nio.file.Files

apply plugin: "com.android.application"
apply plugin: 'com.google.protobuf'

tasks.withType(Test) {
    systemProperty "MiFirmwareDir", System.getProperty("MiFirmwareDir", null)
    systemProperty "logback.configurationFile", System.getProperty("user.dir", null) + "/app/src/main/assets/logback.xml"
    systemProperty "GB_LOGFILES_DIR", Files.createTempDirectory("gblog").toString()
}

def getVersionCode = { ->
    try {
        def commitCount = providers.exec {
            commandLine('git', 'rev-list', 'HEAD', '--count')
        }.standardOutput.asText.get().trim()
        return Integer.valueOf(commitCount)
    } catch (ignored) {
        return null
    }
}

def buildGitChangelog = {
    def allCommits = providers.exec {
        commandLine('git', 'log', '--pretty=format:%h %s')
    }.standardOutput.asText.get()

    def commitVersionCode = getVersionCode()
    def includedCommits = 0
    def changelogNode = new Node(null, 'changelog')

    allCommits.trim().eachLine { line ->
        if (includedCommits > 100) {
            return true;
        }

        def (commitHash, commitMessage) = line.split(" ", 2)
        if (commitMessage.contains("Translated using Weblate")) {
            return true;
        }

        def releaseNode = new Node(changelogNode, 'release', [version: commitHash, versioncode: commitVersionCode--])
        def _ = new Node(releaseNode, 'change', [:], commitMessage)
        includedCommits++
    }

    def changelogFile = new File("${project.rootDir}/app/build/generated/res/changelog/xml/changelog_git.xml")
    changelogFile.getParentFile().mkdirs()
    changelogFile.write(groovy.xml.XmlUtil.serialize(changelogNode))
}

def getGitHashShort = { ->
    try {
        return providers.exec {
            commandLine('git', 'rev-parse', '--short', 'HEAD')
        }.standardOutput.asText.get().trim()
    } catch (ignored) {
        return null
    }
}

android {
    compileOptions {
        coreLibraryDesugaringEnabled true

        // for Android 5+
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace 'nodomain.freeyourgadget.gadgetbridge'

    defaultConfig {
        applicationId "nodomain.freeyourgadget.gadgetbridge"

        //noinspection OldTargetApi
        targetSdkVersion 34
        compileSdk 34
        minSdkVersion 21

        // Note: always bump BOTH versionCode and versionName!
        versionName "0.82.1"
        versionCode 234
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "GIT_HASH_SHORT", "\"${getGitHashShort()}\""
        buildConfigField "boolean", "INTERNET_ACCESS", "false"
    }

    signingConfigs {
        nightly {
            if (System.getProperty("nightly_store_file") != null) {
                storeFile file(System.getProperty("nightly_store_file"))
                storePassword System.getProperty("nightly_store_password")
                keyAlias System.getProperty("nightly_key_alias")
                keyPassword System.getProperty("nightly_key_password")
            }
        }
    }

    flavorDimensions "device_type"
    productFlavors {
        mainline {
            // Ensure that when starting from scratch, 'mainline' is selected, not 'banglejs'
            getIsDefault().set(true)
            // the default build product flavor
            dimension "device_type"
            //applicationIdSuffix ""
            //versionNameSuffix ""
        }

        banglejs {
            dimension "device_type"
            applicationId "com.espruino.gadgetbridge"
            applicationIdSuffix ".banglejs"
            versionNameSuffix "-banglejs"
            buildConfigField "boolean", "INTERNET_ACCESS", "true"
            targetSdkVersion 34
            // Note: app/src/banglejs/AndroidManifest.xml contains some extra permissions
        }
    }

    sourceSets {
        main {
            res.srcDirs += "build/generated/res/changelog"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        nightly {
            applicationIdSuffix ".nightly"
            versionNameSuffix "-${getGitHashShort}"
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            minifyEnabled true
            debuggable false

            if (System.getProperty("nightly_store_file") != null) {
                signingConfig signingConfigs.nightly
            } else {
                signingConfig signingConfigs.debug
            }
        }

        nopebble {
            applicationIdSuffix ".nightly_nopebble"
            versionNameSuffix "-${getGitHashShort}"
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            minifyEnabled true
            debuggable false

            if (System.getProperty("nightly_store_file") != null) {
                signingConfig signingConfigs.nightly
            } else {
                signingConfig signingConfigs.debug
            }
        }

        applicationVariants.all { variant ->
            variant.resValue "string", "applicationId", variant.applicationId
            buildGitChangelog()

            if (variant.buildType.name == 'nightly' || variant.buildType.name == 'nopebble') {
                variant.outputs.all {
                    setVersionCodeOverride(getVersionCode())
                    //setVersionNameOverride(getGitHashShort())
                    setVersionNameOverride(variant.versionName)
                    outputFileName = "${applicationId}_${variant.versionName}.apk"
                }
            }
        }
    }

    lint {
        abortOnError true
        lintConfig file("$rootDir/app/src/main/lint.xml")
        // If true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // Optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
        // Ignore checks present in the snapshot
        baseline file("lint-baseline.xml")
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    buildFeatures {
        aidl true
        buildConfig true
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.3'

    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation "androidx.camera:camera-core:1.4.0"
    implementation "androidx.camera:camera-camera2:1.4.0"
    implementation 'androidx.camera:camera-view:1.4.0'
    implementation 'androidx.camera:camera-lifecycle:1.4.0'

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:5.14.2"
    testImplementation "org.robolectric:robolectric:4.14.1"
    testImplementation "org.hamcrest:hamcrest-library:3.0"

    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "androidx.preference:preference:1.2.1"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.gridlayout:gridlayout:1.0.0"
    implementation "androidx.palette:palette:1.0.0"
    implementation "androidx.activity:activity:1.9.3"
    implementation "androidx.fragment:fragment:1.8.5"
    implementation "androidx.viewpager2:viewpager2:1.1.0"

    // Not latest version because of https://github.com/material-components/material-components-android/issues/3924
    implementation "com.google.android.material:material:1.10.0"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation "com.google.code.gson:gson:2.11.0"

    implementation "no.nordicsemi.android:dfu:2.8.0"
    implementation "com.github.tony19:logback-android:3.0.0"
    implementation "org.slf4j:slf4j-api:2.0.16"
    implementation "com.github.PhilJay:MPAndroidChart:3.1.0"
    implementation "com.github.pfichtner:durationformatter:0.1.1"
    implementation "de.cketti.library.changelog:ckchangelog:1.2.2"
    implementation "net.e175.klaus:solarpositioning:0.1.10"
    implementation "co.nstant.in:cbor:0.9"
    // use pristine greendao instead of our custom version, since our custom jitpack-packaged
    // version contains way too much and our custom patches are in the generator only.
    implementation "org.greenrobot:greendao:2.2.1"
    implementation "org.apache.commons:commons-lang3:3.17.0"
    implementation "org.cyanogenmod:platform.sdk:6.0"
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    implementation 'com.github.wax911.android-emojify:contract:1.9.4'
    implementation 'com.github.wax911.android-emojify:emojify:1.9.4'
    implementation 'com.github.wax911.android-emojify:gson:1.9.4'
    implementation 'com.google.protobuf:protobuf-javalite:4.28.2'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'org.msgpack:msgpack-core:0.9.8'

    // Bouncy Castle is included directly in GB, to avoid pulling the entire dependency
    // It's included in the org.bouncycastle.shaded package, to fix conflicts with roboelectric
    //implementation 'org.bouncycastle:bcpkix-jdk18on:1.76'
    //implementation 'org.bouncycastle:bcprov-jdk18on:1.76'

    // Android SDK bundles org.json, but we need an actual implementation to replace the stubs in tests
    testImplementation 'org.json:json:20240303'

    // Fix Duplicate class build error for conflicting kotlin-stdlib versions
    // does not seem to be currently needed, as it uses the latest across all transitive
    //implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    // Needed for Armenian transliteration
    implementation 'org.ahocorasick:ahocorasick:0.6.3'
}

preBuild.dependsOn(":GBDaoGenerator:genSources")

gradle.beforeProject {
    preBuild.dependsOn(":GBDaoGenerator:genSources")
}

sourceSets {
    main {
        java.srcDirs += "${protobuf.generatedFilesBaseDir}"
        java.srcDirs += "build/generated/source/buildConfig"
    }
}

tasks.register('cleanGenerated', Delete) {
    delete fileTree('src/main/java/nodomain/freeyourgadget/gadgetbridge/entities') {
        include '**/*.java'
        exclude '**/Abstract*.java'
    }
}

tasks.clean.dependsOn(tasks.cleanGenerated)

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:4.28.2'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
